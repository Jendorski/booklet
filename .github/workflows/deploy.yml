name: Continuous Deployment

on:
    push:
        branches:
            - development
            - main

env:
    AWS_REGION: ${{vars.AWS_REGION}}
    ECR_REPOSITORY: ${{vars.ECR_REPOSITORY}}
    ECS_SERVICE: ${{vars.ECS_SERVICE}}
    ECS_CLUSTER: ${{vars.ECS_CLUSTER}}
    CONTAINER_NAME: ${{vars.CONTAINER_NAME}}

jobs:
    deploy:
        name: Lint, Test and Deploy ðŸš€
        runs-on: ubuntu-latest
        environment: ${{ github.ref_name }}

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Use Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '22.5.1'

            - name: Run Lint
              run: |
                  npm install -g pnpm
                  pnpm install
                  pnpm swagger
                  pnpm build
                  pnpm lint

            - name: Run Tests
              run: |
                  pnpm build
                  pnpm test:run

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Set outputs
              id: vars
              run: echo "::set-output name=GIT_SHA::$(git rev-parse --short HEAD)"

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            - name: Build, tag, and push image to Amazon ECR
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  GIT_SHA: ${{ steps.vars.outputs.GIT_SHA }}
                  BRANCH: ${{ github.ref_name }}
              run: |
                  docker build --build-arg GIT_SHA=$GIT_SHA -t $ECR_REGISTRY/$ECR_REPOSITORY:$GIT_SHA .
                  docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$GIT_SHA $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GIT_SHA
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH

            - name: Deploy Amazon ECS task definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@v2
              id: ecs-deploy
              with:
                  task-definition: ${{ vars.ECS_TASK_DEFINITION }}
                  service: ${{ env.ECS_SERVICE }}
                  cluster: ${{ env.ECS_CLUSTER }}
                  wait-for-service-stability: true

            - name: Verify Deployment
              run: |
                  CURRENT_TASK_DEF_ARN=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query services[0].deployments[0].taskDefinition | jq -r ".")
                  NEW_TASK_DEF_ARN=${{ steps.ecs-deploy.outputs.task-definition-arn }}
                  echo "Current task arn: $CURRENT_TASK_DEF_ARN"
                  echo "New task arn: $NEW_TASK_DEF_ARN"
                  if [ "$CURRENT_TASK_DEF_ARN" != "$NEW_TASK_DEF_ARN" ]; then
                    echo "Deployment failed."
                    exit 1
                  fi

            - name: Upload Sourcemaps
              run: npx @sentry/wizard@latest -i sourcemaps
